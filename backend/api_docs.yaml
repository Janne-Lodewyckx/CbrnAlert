openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  # TODO: CHANGE TO HTTPS FOR PROD
  - url: http://localhost:8000/api

components:
  schemas:
    BasicAtp45Input:
      type: object
      required:
        - "locations"
        - "procedureTypeId"
        - "containerId"

      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/GeoPoint'
          description: 'Array of release points'
        procedureTypeId:
          type: string
          example: "A"
        containerId:
          type: string
          example: "BML"

    WindAtp45Input:
      allOf:
        - $ref: '#/components/schemas/BasicAtp45Input'
        - type: object
          required:
            - wind
          properties:
            wind:
              $ref: '#/components/schemas/WindVelocity'

    ForecastAtp45Input:
      allOf:
        - $ref: '#/components/schemas/BasicAtp45Input'
        - type: object
          required:
            - date
          properties:
            step:
              $ref: '#/components/schemas/ForecastStep'
              description: 'Step of the forecast'
    
    WindVelocity:
      type: object
      required:
        - "speed"
        - "azimuth"
      properties:
        speed:
          type: number
          description: 'Wind speed - units [m/s]'
        azimuth:
          type: number
          description: 'angle from North - units [m/s]'
    GeoPoint:
      type: object
      required:
        - "lon"
        - "lat"
      properties:
        lon:
          type: number
          description: 'Longitude [°]'
        lat:
          type: number
          description: 'Latitude [°]'
    GeoRectangle:
      type: object
      required:
        - "top"
        - "bottom"
        - "left"
        - "right"
      properties:
        top:
          type: number
          description: 'north lat [°]'
        bottom:
          type: number
          description: 'south lat [°]'
        left:
          type: number
          description: 'west lon [°]'
        right:
          type: number
          description: 'east lon [°]'

    Atp45Result:
      type: object
      required:
        - 'collection'
      properties:
        'collection':
          allOf:
            - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/FeatureCollection'
            - type: object
              properties:
                'features':
                  type: array
                  items:
                    allOf:
                      # - $ref: './api_geojson.yaml#/components/schemas/Feature'
                      - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Feature'
                      - type: object
                        properties:
                          'geometry':
                            allOf:
                              # - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Polygon'
                              - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Polygon'
                          'properties':
                            type: object
                            properties:
                              'type':
                                type: string
                              'shape':
                                type: string
        'metadata':
          type: object
          properties:
            'cbrnType':
              $ref: '#/components/schemas/CbrnType'
            'wind':
              $ref: '#/components/schemas/WindVelocity'

    CbrnType:
      type: object
      required:
        - 'procedureType'
      properties:
        'procedureType':
          $ref: '#/components/schemas/ProcedureType'
        'container':
          $ref: '#/components/schemas/CbrnContainer'

    CbrnContainer:
      type: object
      properties:
        'id':
          type: string
          example: SB_RKT
        'description':
          type: string
          example: "Surface Burst Rocket"

    ProcedureType:
      type: object
      properties:
        'id':
          type: string
          example: typeA
        'description':
          type: string
          example: "Non Persistent Agents"

    Atp45Zone:
      allOf:
      # $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Polygon'
        - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Feature'
        - type: object
          properties:
            'properties':
              type: object
              properties:
                'area':
                  type: string
                  example: "release area"
                'shape':
                  type: string
                  example: "circle"
            'geometry':
              allOf:
                - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Polygon'

    ForecastAvailableSteps:
      type: object
      required:
        - "start"
        - "leadtimes"
      properties:
        start:
          type: string
          format: date-time
        leadtimes:
          type: array
          items:
            type: string
            format: date-time
    ForecastStep:
      type: object
      required:
        - "start"
        - "leadtime"
      properties:
        start:
          type: string
          format: date-time
        leadtime:
          type: string
          format: date-time

    FlexpartInput:
      type: object
      required:
        - "uuid"
        - "name"
        - "date_created"
        - "control"
      properties:
        uuid:
          type: string
        name:
          type: string
        status:
          type: string
          $ref: '#/components/schemas/RunStatus'
        date_created:
          type: string
          format: date-time
        control:
          type: object
          additionalProperties: 
            type: string
    FlexpartReleaseSimple:
      type: object
      required:
        - location
        - start
        - end
        - height
        - mass
      properties:
        location:
          $ref: '#/components/schemas/GeoPoint'
        start:
          type: string
          format: date-time
        end: 
          type: string
          format: date-time
        height:
          type: number
          default: 50.0
        mass:
          type: number
          default: 1000
        particles:
          type: number
          
    FlexpartCommandSimple:
      type: object
      required:
        - start
        - end
        - timeStep
        - outputType
      properties:
        start:
          type: string
          format: date-time
        end: 
          type: string
          format: date-time
        timeStep:
          type: number
          description: 'units: [s]'
          default: 3600
        specie:
          type: string
          default: "AIRTRACER"
        outputType:
          type: number
          default: 1
          description: 'Units for the output (see Flexpart docs)'

    FlexpartOutgridSimple:
      type: object
      required:
        - area
        - gridres
        - heights
      properties:
        area:
          $ref: '#/components/schemas/GeoRectangle'
        gridres: 
          type: number
          default: 1.0
          description: 'units: [°]'
        heights:
          type: array
          items: 
            type: number
            default: 100.0

    FlexpartOptionsSimple:
      type: object
      required:
        - releases
        - command
        - outgrid
      properties:
        releases:
          type: array
          items:
            $ref: '#/components/schemas/FlexpartReleaseSimple'
        command:
          $ref: '#/components/schemas/FlexpartCommandSimple'
        outgrid:
          $ref: '#/components/schemas/FlexpartOutgridSimple'
        

    FlexpartRun:
      type: object
      required:
        - "uuid"
        - "name"
        - "date_created"
        - "options"
      properties:
        uuid:
          type: string
        name:
          type: string
        status:
          type: string
          $ref: '#/components/schemas/RunStatus'
        date_created:
          type: string
          format: date-time
        options:
          type: object

    FlexpartOutput:
      type: object
      required:
        - "uuid"
        - "name"
        - "date_created"
        - "metadata"
      properties:
        uuid:
          type: string
        name:
          type: string
        date_created:
          type: string
          format: date-time
        metadata:
          type: object

    RawSliceResponse:
      type: array
      items:
        type: number

    GeoJsonSliceResponse:
      type: object
      required:
        - 'collection'
      properties:
        'collection':
          allOf:
            - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/FeatureCollection'
            - type: object
              properties:
                'features': 
                  type: array
                  items:
                    $ref: '#/components/schemas/GeoCell'
        'metadata':
          # type: object
          oneOf: 
            - $ref: '#/components/schemas/ColorbarData'
            # description: 'Place for other information like legend map'
      # properties:
    ColorbarData:
      type: object
      properties:
        colors:
          type: array
          items: 
            type: string
          description: 'Colors for each interval in hex format'
          example: ["#00007F", "#0000FF", "#7F0000"]
        ticks:
          type: array
          items:
            type: number
          description: 'Values for the bounding intervals'

    GeoCell:
      type: object
      allOf:
        - $ref: 'https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Feature'
        - type: object
          properties:
            'geometry':
              $ref: https://api.swaggerhub.com/apis/OlivierMartineau/GeoJSON/1.0.0#/components/schemas/Polygon
            'properties':
              type: object
              properties:
                'val': 
                  type: number
    RunStatus:
      type: string
      enum:
        - "created"
        - "finished"
        - "ongoing"
        - "errored"

  parameters:
    inputIdParam:
      in: path
      name: inputId
      required: true
      schema:
        type: string
      description: The input ID
    runIdParam:
      in: path
      name: runId
      required: true
      schema:
        type: string
      description: The flexpart run ID
    outputIdParam:
      in: path
      name: outputId
      required: true
      schema:
        type: string
      description: The output ID
  

  securitySchemes:
    name:
      type: http
      scheme: bearer
      bearerFormat: JWTpaths

  
paths:
  /atp45/run/forecast:
    post:
      description: 'Run ATP45 with forecast wind data'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForecastAtp45Input'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Atp45Result'

  /atp45/run/wind:
    post:
      description: 'Run ATP45 with request wind data'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindAtp45Input'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Atp45Result'
          
  /forecast/available:
    get:
      description: 'Return the last forecast datetimes available at ECMWF'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForecastAvailableSteps'

  /flexpart/inputs:
    get:
      description: 'Return all the Flexpart inputs available (default finished)'
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/RunStatus'
            default: "finished"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartInput'
  /flexpart/run:
    post:
      description: 'Run flexpart'
      parameters:
        - name: runType
          in: query
          description: 'If `simple`, use the simplified options structure defined by `FlexpartOptionsSimple`. If `detailed`, a full Flexpart options object is expected (see Flexpart docs)'
          schema:
            type: string
            enum:
              - "simple"
              - "detailed"
            default: "simple"

        - name: inputId
          in: query
          required: true
          description: 'Input id'
          schema:
            type: string

      requestBody:
        required: true
        description: 'Options for Flexpart.'
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/FlexpartOptionsSimple'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRun'

  /flexpart/runs:
    get:
      description: 'Return all the Flexpart runs (default finished)'
      parameters:
        - in: query
          name: status
          schema:
            # type: string
            # enum:
            $ref: '#/components/schemas/RunStatus'
            default: "finished"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartRun'

  /flexpart/runs/{runId}:
    get:
      parameters:
        - $ref: '#/components/parameters/runIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRun'

  /flexpart/runs/{runId}/outputs:
    get:
      description: 'Return the outputs of the Flexpart run `runId`'
      parameters:
        - $ref: '#/components/parameters/runIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartOutput'

  /flexpart/outputs/{outputId}:
    get:
      parameters:
        - $ref: '#/components/parameters/outputIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartOutput'

  /flexpart/outputs/{outputId}/layers:
    get:
      description: 'Return the layers of the Flexpart output `outputId`'
      parameters:
        - $ref: '#/components/parameters/outputIdParam'
        - in: query
          name: spatial
          schema:
            type: boolean
            default: false
          description: If only spatial layers must be retrieved

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /flexpart/outputs/{outputId}/dimensions:
    get:
      description: 'Return the dimensions layers of the Flexpart output `outputId` with their values'
      parameters:
        - $ref: '#/components/parameters/outputIdParam'
        - in: query
          name: layer
          schema:
            type: string
          description: If the name of the layer is given, only returns the dimensions of the layer
        - in: query
          name: horizontal
          schema:
            type: boolean
            default: false
          description: If false, don't return the horizontal dimensions (lons and lats)  

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /flexpart/outputs/{outputId}/slice:
    post:
      description: 'Return a slice of the `output` according to some dimensions.'
      parameters:
        - in: query
          name: layer
          required: true
          schema:
            type: string
          description: Name of the layer to slice
        - in: query
          name: geojson
          schema: 
            type: boolean
            default: false
          description: If true, the output is given in geojson format. The sliced layer must be a surface.
        - in: query
          name: legend
          schema: 
            type: boolean
            default: false
          description: If true, data for legend is provided

        - $ref: '#/components/parameters/outputIdParam'
      requestBody:
        required: true
        description: 'dimensions to be sliced along'
        content:
          application/json:
            schema:
              type: object
              example: {Time:'2022-02-12T22:00:00.0', height:50, pointpsec:1, nageclass:1}

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                 - $ref: '#/components/schemas/RawSliceResponse'
                 - $ref: '#/components/schemas/GeoJsonSliceResponse'


  /atp45/containers:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbrnContainer'

  /atp45/procedures:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcedureType'